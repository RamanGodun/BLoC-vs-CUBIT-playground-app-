/*
==========================================================
üìå 1Ô∏è‚É£ –ñ–∏—Ç—Ç—î–≤–∏–π —Ü–∏–∫–ª —Ç–∞ —Ä–æ–±–æ—Ç–∞ Cubit
==========================================================

1.1 –Ø–∫ –ø—Ä–∞—Ü—é—î Cubit?
---------------------------------
Cubit ‚Äì —Ü–µ —Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è BLoC, —è–∫–∞ –º–∞—î **–ø—Ä—è–º–∏–π –º–µ—Ç–æ–¥ emit()** –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É.  
–ô–æ–≥–æ –∂–∏—Ç—Ç—î–≤–∏–π —Ü–∏–∫–ª –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫:

1Ô∏è‚É£ **–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è**
   ‚Ä¢ `CubitProvider` –∞–±–æ `Cubit()` —Å—Ç–≤–æ—Ä—é—î –µ–∫–∑–µ–º–ø–ª—è—Ä Cubit.
   ‚Ä¢ –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è **–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä**, –≤ —è–∫–æ–º—É –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è `initialState`.

2Ô∏è‚É£ **–í–∑–∞—î–º–æ–¥—ñ—è –∑ UI**
   ‚Ä¢ UI –≤–∏–∫–ª–∏–∫–∞—î –º–µ—Ç–æ–¥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `increment()`).
   ‚Ä¢ –ú–µ—Ç–æ–¥ –æ–±—á–∏—Å–ª—é—î **–Ω–æ–≤–∏–π —Å—Ç–∞–Ω** —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î `emit(newState)`.  

3Ô∏è‚É£ **–í–∏–∫–æ–Ω–∞–Ω–Ω—è emit()**
   ‚Ä¢ Cubit **–≤–∏–∫–ª–∏–∫–∞—î `onChange(Change<T>)`** –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º —Å—Ç–∞–Ω—É.
   ‚Ä¢ `Change<T>` –º—ñ—Å—Ç–∏—Ç—å **–ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω (`currentState`) —Ç–∞ –Ω–æ–≤–∏–π (`nextState`)**.
   ‚Ä¢ –Ø–∫—â–æ `currentState == nextState`, —Ç–æ `emit()` –Ω–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è.

4Ô∏è‚É£ **–û–Ω–æ–≤–ª–µ–Ω–Ω—è UI**
   ‚Ä¢ `BlocBuilder` –∞–±–æ `BlocListener` –æ—Ç—Ä–∏–º—É—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Ç–∞ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—é—î UI.

5Ô∏è‚É£ **–ó–∞–∫—Ä–∏—Ç—Ç—è (close())**
   ‚Ä¢ –ö–æ–ª–∏ Cubit –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è `close()`.
   ‚Ä¢ –ü–æ—Ç—ñ–∫ `state.stream` –∑–∞–∫—Ä–∏–≤–∞—î—Ç—å—Å—è, –ø–∞–º'—è—Ç—å –æ—á–∏—â–∞—î—Ç—å—Å—è.


==========================================================
**********************************************************
==========================================================


üìå 2Ô∏è‚É£ –ñ–∏—Ç—Ç—î–≤–∏–π —Ü–∏–∫–ª —Ç–∞ —Ä–æ–±–æ—Ç–∞ BLoC 
==========================================================

BLoC ‚Äì —Ü–µ **—Ä–µ–∞–∫—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥**, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î **–ø–æ–¥—ñ—ó (Event) —Ç–∞ –ø–æ—Ç–æ–∫–∏ (Stream)**.

2.1 –Ø–∫ –ø—Ä–∞—Ü—é—î BLoC?
---------------------------------
1Ô∏è‚É£ **–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è**
   ‚Ä¢ –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è —á–µ—Ä–µ–∑ `BlocProvider` –∞–±–æ `Bloc()`.
   ‚Ä¢ –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä `super(initialState)`.

2Ô∏è‚É£ **–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó (add(event))**
   ‚Ä¢ UI –≤–∏–∫–ª–∏–∫–∞—î `bloc.add(MyEvent())`.
   ‚Ä¢ –°–ø—Ä–∞—Ü—å–æ–≤—É—î `onEvent()`, —â–æ –¥–æ–∑–≤–æ–ª—è—î –ª–æ–≥—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—é.

3Ô∏è‚É£ **Event Transformer (–û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π —É –ø–æ—Ç–æ—Ü—ñ)**
   ‚Ä¢ `BLoC` –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º **–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ** –æ–±—Ä–æ–±–ª—è—î –ø–æ–¥—ñ—ó.
   ‚Ä¢ –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ **RxDart** (`debounceTime`, `switchMap`) –¥–ª—è **–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó**.

4Ô∏è‚É£ **–û–±—Ä–æ–±–∫–∞ Event Handler (`on<T>`)**
   ‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π `on<T>` –≤–∏–∫–æ–Ω—É—î –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î `emit(newState)`.
   ‚Ä¢ **BLoC –º–æ–∂–µ –µ–º—ñ—Ç—É–≤–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Å—Ç–∞–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å**.

5Ô∏è‚É£ **–ó–º—ñ–Ω–∞ —Å—Ç–∞–Ω—É (`emit(newState)`)**
   ‚Ä¢ –°–ø—Ä–∞—Ü—å–æ–≤—É—î `onTransition()`, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å `currentState ‚Üí nextState`.

6Ô∏è‚É£ **–ó–∞–∫—Ä–∏—Ç—Ç—è (close())**
   ‚Ä¢ –ü–æ—Ç—ñ–∫ `state.stream` –∑–∞–∫—Ä–∏–≤–∞—î—Ç—å—Å—è, –ø—ñ–¥–ø–∏—Å–∫–∏ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è.
   ‚Ä¢ –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è `onClose()` –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—ñ.


==========================================================
**********************************************************
==========================================================


üìå‚úÖ 3Ô∏è‚É£ –†–µ–∂–∏–º–∏ –æ–±—Ä–æ–±–∫–∏ Event Transformation —Ç–∞ bloc_concurrency
==========================================================

`bloc_concurrency` ‚Äì —Ü–µ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è **–∫–∞—Å—Ç–æ–º–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–¥—ñ–π** —É BLoC.  
–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, –≤—Å—ñ –ø–æ–¥—ñ—ó –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è **sequential** (–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ).  
–ú–∏ –º–æ–∂–µ–º–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ **—Ä–µ–∂–∏–º–∏ –æ–±—Ä–æ–±–∫–∏**, —â–æ–± –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.

-----------------------------------------------------------
üîπ **concurrent()** ‚Äì –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π
-----------------------------------------------------------
üìå **–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏?**  
   ‚Ä¢ –ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ **–Ω–µ–∑–∞–ª–µ–∂–Ω—ñ –ø–æ–¥—ñ—ó –æ–¥–Ω–æ—á–∞—Å–Ω–æ**.  
   ‚Ä¢ –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è **–¥–≤–æ—Ö API-–∑–∞–ø–∏—Ç—ñ–≤** –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ.

üìù **–ü—Ä–∏–∫–ª–∞–¥**:
-----------------------------------------------------------
on<MyEvent>(
  (event, emit) async {
    await Future.delayed(Duration(seconds: 2));
    emit(MyState(data: 'Updated'));
  },
  transformer: concurrent(),
);
-----------------------------------------------------------

-----------------------------------------------------------
üîπ **sequential()** ‚Äì –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
-----------------------------------------------------------
üìå **–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏?**  
   ‚Ä¢ –ö–æ–ª–∏ –ø–æ–¥—ñ—ó **–∑–∞–ª–µ–∂–Ω—ñ –æ–¥–Ω–∞ –≤—ñ–¥ –æ–¥–Ω–æ—ó** (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≤ –ë–î).  
   ‚Ä¢ –ì–∞—Ä–∞–Ω—Ç—É—î **–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è**.

üìù **–ü—Ä–∏–∫–ª–∞–¥**:
-----------------------------------------------------------
on<MyEvent>(
  (event, emit) async {
    emit(MyState.loading());
    final data = await fetchData();
    emit(MyState.loaded(data));
  },
  transformer: sequential(),
);
-----------------------------------------------------------

-----------------------------------------------------------
üîπ **restartable()** ‚Äì –°–∫–∏–¥–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –ø–æ–¥—ñ—ó, —è–∫—â–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–æ–≤–∞
-----------------------------------------------------------
üìå **–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏?**  
   ‚Ä¢ **–î–ª—è –ø–æ—à—É–∫—É (search input)** ‚Äì –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Ç, —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π.  
   ‚Ä¢ **–î–ª—è live-updates** ‚Äì –æ–±—Ä–æ–±–ª—è—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø–æ–¥—ñ—ó.

üìù **–ü—Ä–∏–∫–ª–∞–¥**:
-----------------------------------------------------------
on<SearchEvent>(
  (event, emit) async {
    final results = await api.search(event.query);
    emit(SearchState.loaded(results));
  },
  transformer: restartable(),
);
-----------------------------------------------------------

-----------------------------------------------------------
üîπ **droppable()** ‚Äì –Ü–≥–Ω–æ—Ä—É—î –Ω–æ–≤—É –ø–æ–¥—ñ—é, —è–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—è —â–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è
-----------------------------------------------------------
üìå **–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏?**  
   ‚Ä¢ **–ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç–∞–º** –ø—Ä–∏ —à–≤–∏–¥–∫–æ–º—É –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏.  
   ‚Ä¢ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è** ‚Äì —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç, –ø–æ–∫–∏ –ø–µ—Ä—à–∏–π –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è.

üìù **–ü—Ä–∏–∫–ª–∞–¥**:
-----------------------------------------------------------
on<LoginEvent>(
  (event, emit) async {
    final user = await authService.login(event.username, event.password);
    emit(AuthState.loggedIn(user));
  },
  transformer: droppable(),
);
-----------------------------------------------------------


==========================================================
**********************************************************
==========================================================


==========================================================
üìå –ü–∞—Ç–µ—Ä–Ω–∏ –≤–∑–∞—î–º–æ–¥—ñ—ó BLoC
==========================================================

BLoC, —â–æ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —ñ–Ω—à–æ–≥–æ BLoC (Stream Subscription)

–Ø–∫—â–æ `BLoC A` –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ `BLoC B`, —î 2 –ø—ñ–¥—Ö–æ–¥–∏:
   ‚Ä¢ –õ–∏—à–µ **—Å–∞–π—Ç-–µ—Ñ–µ–∫—Ç–∏ (`BlocListener`)**.
   ‚Ä¢ –ü–æ–≤–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ **StreamSubscription**.

‚úÖ **1. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è BlocListener –¥–ª—è Side Effects**
-----------------------------------------------------------
BlocListener<ColorBloc, ColorState>(
  listenWhen: (previous, current) => previous.color != current.color,
  listener: (context, state) {
    if (state.color == Colors.red) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: Text('Color changed to red!'),
      ));
    }
  },
  child: MyWidget(),
);
-----------------------------------------------------------

‚úÖ **2. –ü–æ–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ StreamSubscription**
-----------------------------------------------------------
class CounterBloc extends Bloc<CounterEvent, int> {
  final ColorBloc colorBloc;
  late final StreamSubscription colorSubscription;

  CounterBloc(this.colorBloc) : super(0) {
    colorSubscription = colorBloc.stream.listen((colorState) {
      if (colorState.color == Colors.red) {
        add(IncrementEvent());
      }
    });

    on<IncrementEvent>((event, emit) {
      emit(state + 1);
    });
  }

  @override
  Future<void> close() {
    colorSubscription.cancel();
    return super.close();
  }
}
-----------------------------------------------------------


==========================================================
üìå –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ç–∞ –Ω–∞–π–∫—Ä–∞—â—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏
==========================================================

‚úÖ **1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ buildWhen —É BlocBuilder**
-----------------------------------------------------------
BlocBuilder<MyBloc, MyState>(
  buildWhen: (previous, current) => previous.counter != current.counter,
  builder: (context, state) {
    return Text('${state.counter}');
  },
);
-----------------------------------------------------------

‚úÖ **2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ debounceTime –¥–ª—è —á–∞—Å—Ç–∏—Ö –ø–æ–¥—ñ–π**
-----------------------------------------------------------
EventTransformer<E> debounceSequential<E>() {
  return (events, mapper) {
    return events.debounceTime(Duration(milliseconds: 300)).switchMap(mapper);
  };
}
-----------------------------------------------------------

‚úÖ **3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ throttle –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –ø–æ–¥—ñ–π**
-----------------------------------------------------------
EventTransformer<E> throttleSequential<E>(Duration duration) {
  return (events, mapper) {
    return events.throttleTime(duration).switchMap(mapper);
  };
}
-----------------------------------------------------------

‚úÖ **4. –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –ø–µ—Ä–µ–¥ emit()**
-----------------------------------------------------------
void safeEmit(MyBloc bloc, MyState newState) {
  if (!bloc.isClosed) bloc.emit(newState);
}
-----------------------------------------------------------



==========================================================
**********************************************************
==========================================================


*/
