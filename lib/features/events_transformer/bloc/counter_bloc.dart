import 'package:bloc/bloc.dart';
import 'package:bloc_concurrency/bloc_concurrency.dart';
import 'package:equatable/equatable.dart';

part 'counter_event.dart';
part 'counter_state.dart';

/// üéØ CounterBloc, —è–∫–∏–π –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î —Ä—ñ–∑–Ω—ñ Event Transformers.
class CounterBlocWithTransformers
    extends Bloc<CounterEvent, CounterStateWithTransformers> {
  CounterBlocWithTransformers()
      : super(CounterStateWithTransformers.initial()) {
    // ‚è≥ Droppable - —ñ–≥–Ω–æ—Ä—É—î –Ω–æ–≤—ñ –ø–æ–¥—ñ—ó, —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∞ —â–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è.
    on<IncrementCounterEvent>(
      _handleIncrementCounterEvent,
      transformer: droppable(),
    );

    // üîÑ Restartable - —Å–∫–∞—Å–æ–≤—É—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–∫–ª–∏–∫ —ñ –∑–∞–ø—É—Å–∫–∞—î –Ω–æ–≤–∏–π.
    on<DecrementCounterEvent>(
      _handleDecrementCounterEvent,
      transformer: restartable(),
    );

    // üéØ –û–∫—Ä–µ–º–∏–π –ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –ø–æ–¥—ñ–π –≤ –æ–¥–Ω—É –ª–æ–≥—ñ–∫—É:
    /*
    on<CounterEvent>(
      (event, emit) async {
        switch (event) {
          case IncrementCounterEvent():
            await _handleIncrementCounterEvent(event, emit);
          case DecrementCounterEvent():
            await _handleDecrementCounterEvent(event, emit);
        }
      },
      transformer: sequential(), // –ü–æ–¥—ñ—ó –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ.
    );
    */
  }

  /// ‚è≥ Droppable: –Ü–≥–Ω–æ—Ä—É—î –Ω–æ–≤—ñ –ø–æ–¥—ñ—ó, —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∞ —â–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è.
  Future<void> _handleIncrementCounterEvent(IncrementCounterEvent event,
      Emitter<CounterStateWithTransformers> emit) async {
    await Future.delayed(const Duration(seconds: 3)); 
    emit(state.copyWith(counter: state.counter + 1));
  }

  /// üîÑ Restartable: –°–∫–∞—Å–æ–≤—É—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç —ñ –≤–∏–∫–æ–Ω—É—î –æ—Å—Ç–∞–Ω–Ω—ñ–π.
  Future<void> _handleDecrementCounterEvent(DecrementCounterEvent event,
      Emitter<CounterStateWithTransformers> emit) async {
    await Future.delayed(const Duration(seconds: 1));
    emit(state.copyWith(counter: state.counter - 1));
  }
}
